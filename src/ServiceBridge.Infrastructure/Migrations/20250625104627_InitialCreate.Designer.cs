// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceBridge.Infrastructure.Data;

#nullable disable

namespace ServiceBridge.Infrastructure.Migrations
{
    [DbContext(typeof(ServiceBridgeDbContext))]
    [Migration("20250625104627_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ServiceBridge.Domain.Entities.AuditEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Auto-increment primary key");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Action performed: Created, Updated, Deleted");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Primary key value(s) of the changed entity");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Type of entity that was changed (Product, ScanTransaction)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasComment("IP address of the client");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("JSON representation of new values");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT")
                        .HasComment("JSON representation of old values (null for Created)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Source of change: REST, gRPC, SignalR, EF");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasComment("When the change occurred (UTC)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("ID of user who made the change");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("IX_AuditEntries_EntityId");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("IX_AuditEntries_EntityType");

                    b.HasIndex("Source")
                        .HasDatabaseName("IX_AuditEntries_Source");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditEntries_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditEntries_UserId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_AuditEntries_EntityType_EntityId");

                    b.HasIndex("EntityType", "Timestamp")
                        .HasDatabaseName("IX_AuditEntries_EntityType_Timestamp");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("IX_AuditEntries_UserId_Timestamp");

                    b.ToTable("AuditEntries", (string)null);
                });

            modelBuilder.Entity("ServiceBridge.Domain.Entities.Product", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT")
                        .HasComment("Product code in format ABC123 (3 letters + 3 digits)");

                    b.Property<decimal>("AverageMonthlyConsumption")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Average monthly consumption for reorder calculations");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Product description");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT")
                        .HasComment("Last update timestamp");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User who last updated the product");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("INTEGER")
                        .HasComment("Lead time in days (1-365)");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("INTEGER")
                        .HasComment("Current stock quantity");

                    b.Property<int>("QuantityOnOrder")
                        .HasColumnType("INTEGER")
                        .HasComment("Quantity currently on order");

                    b.HasKey("ProductCode");

                    b.HasIndex("Description")
                        .HasDatabaseName("IX_Products_Description");

                    b.HasIndex("LastUpdated")
                        .HasDatabaseName("IX_Products_LastUpdated");

                    b.HasIndex("ProductCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_ProductCode");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("ServiceBridge.Domain.Entities.ScanTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Auto-increment primary key");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("INTEGER")
                        .HasComment("Stock quantity after scan");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Optional notes for the transaction");

                    b.Property<int>("PreviousQuantity")
                        .HasColumnType("INTEGER")
                        .HasComment("Stock quantity before scan");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Product");

                    b.Property<int>("QuantityScanned")
                        .HasColumnType("INTEGER")
                        .HasComment("Quantity scanned (can be negative for adjustments)");

                    b.Property<DateTime>("ScanDateTime")
                        .HasColumnType("TEXT")
                        .HasComment("When the scan occurred (UTC)");

                    b.Property<string>("ScannedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User who performed the scan");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Type of transaction: StockCount, Adjustment, Receiving");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("IX_ScanTransactions_ProductCode");

                    b.HasIndex("ScanDateTime")
                        .HasDatabaseName("IX_ScanTransactions_ScanDateTime");

                    b.HasIndex("ScannedBy")
                        .HasDatabaseName("IX_ScanTransactions_ScannedBy");

                    b.HasIndex("TransactionType")
                        .HasDatabaseName("IX_ScanTransactions_TransactionType");

                    b.HasIndex("ProductCode", "ScanDateTime")
                        .HasDatabaseName("IX_ScanTransactions_ProductCode_ScanDateTime");

                    b.ToTable("ScanTransactions", (string)null);
                });

            modelBuilder.Entity("ServiceBridge.Domain.Entities.ScanTransaction", b =>
                {
                    b.HasOne("ServiceBridge.Domain.Entities.Product", "Product")
                        .WithMany("ScanTransactions")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ScanTransactions_Products_ProductCode");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ServiceBridge.Domain.Entities.Product", b =>
                {
                    b.Navigation("ScanTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
