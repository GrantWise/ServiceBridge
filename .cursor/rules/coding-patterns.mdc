---
description: 
globs: 
alwaysApply: true
---
### SOLID Principles

**Single Responsibility:** Each class/function has one reason to change
**Open/Closed:** Open for extension, closed for modification
**Liskov Substitution:** Derived classes must be substitutable for base classes
**Interface Segregation:** Clients shouldn't depend on interfaces they don't use
**Dependency Inversion:** Depend on abstractions, not concretions

### Additional Design Principles

**DRY (Don't Repeat Yourself):** Eliminate code duplication through abstraction
**YAGNI (You Aren't Gonna Need It):** Implement only current requirements
**Composition over Inheritance:** Favor object composition over class inheritance
**Fail Fast:** Detect and report errors as early as possible

### Enterprise Patterns (Required)

**Clean Architecture:** Strict 4-layer structure with proper dependency rules
**CQRS:** Separate commands (write) from queries (read) using MediatR
**Domain-Driven Design:** Model software around business domain concepts
**Repository Pattern:** Abstract data access behind interfaces
**Result Pattern:** Return structured results instead of throwing exceptions

### Code Quality Standards

**Naming Conventions:** Use clear, descriptive names that express intent
**Function Design:** Keep functions small and focused (20-40 lines)
**Class Design:** Single responsibility, minimal public APIs
**Error Handling:** Use specific exception types with meaningful messages